# -*- coding: utf-8 -*-
"""Hof.ipynb

Automatically generated by Colab.

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_excel('data_final.xlsx')


df.sample(8)

# @title Category
df['Category'].value_counts()
df.groupby('Category').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.title('Category_Count')
plt.ylabel('Category')
plt.xlabel('Count')
plt.show()

df.info()

df.isnull().sum()

print(df.nunique())

df['Grievance'].duplicated().sum()
#Cateory Processing
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit(df['Category'])
df['Category'] = le.transform(df['Category'])

df['Category'].value_counts()

df['Category'].value_counts()
df.groupby('Category').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.title('Category_Count')
plt.ylabel('Category')
plt.xlabel('Count')
plt.show()

correlation_matrix=df['Category'].corr(df['Urgency Rating'])
print(correlation_matrix)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df[['Grievance','Category']], df['Urgency Rating'], test_size=0.2, random_state=42)
# Grivence Processing
from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(max_features=5000)
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train['Grievance'])

from scipy.sparse import hstack,csr_matrix
X_train_category = csr_matrix(X_train['Category'].values.reshape(-1, 1))
X_combined = hstack([X_train_tfidf, X_train_category])
x_test_category = csr_matrix(X_test['Category'].values.reshape(-1, 1))
X_test_combined = hstack([tfidf_vectorizer.transform(X_test['Grievance']), x_test_category])

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# from sklearn.ensemble import RandomForestRegressor
# clf = RandomForestRegressor()
# clf.fit(X_train_tfidf, y_train)
from sklearn import svm
clf = svm.SVR()
clf.fit(X_combined, y_train)

y_pred = clf.predict(X_test_combined)

from sklearn.metrics import mean_squared_error, r2_score

# Calculate and print regression metrics

print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared:", r2_score(y_test, y_pred))

import pickle
with open('model.pkl', 'wb') as f:
    pickle.dump(clf, f)
pickle.dump(tfidf_vectorizer, open('tfidf_vectorizer.pkl', 'wb'))
pickle.dump(le, open('label_encoder.pkl', 'wb'))

import joblib
joblib.dump(clf, 'model.pkl')

